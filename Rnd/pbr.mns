#include "fragment.mns"
#include "vertex.mns"

// defines
@define(PI, 3.14159265359)
@define(MAX_LIGHTS, 4)

// inputs
@input(TexCoord: Vec2)
@input(WorldPos: Vec3)
@input(Normal: Vec3)

// outputs
@output(FragColour: Vec4)

// uniforms
@uniform(albedo: Vec3)
@uniform(metallic: Float)
@uniform(roughness: Float)
@uniform(ao: Float)
@uniform(lightPositions: Vec3[MAX_LIGHTS])
@uniform(lightColors: Vec3[MAX_LIGHTS])
@uniform(camPos: Vec3)

// functions
func DistributionGGX(N: Vec3, H: Vec3, roughness: Float): Float {
    var a = roughness * roughness;
    var a2 = a * a;
    var NdotH = max(dot(N, H), 0.0);
    var NdotH2 = NdotH * NdotH;

    var denom = (NdotH2 * (a2 - 1.0) + 1.0);
    return a2 / (PI * denom * denom);
}

func GeometrySchlickGGX(NdotV: Float, roughness: Float): Float {
    var r = roughness + 1.0;
    var k = (r * r) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}

func GeometrySmith(N: Vec3, V: Vec3, L: Vec3, roughness: Float): Float {
    var NdotV = max(dot(N, V), 0.0);
    var NdotL = max(dot(N, L), 0.0);
    var ggx1 = GeometrySchlickGGX(NdotV, roughness);
    var ggx2 = GeometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

func fresnelSchlick(cosTheta: Float, F0: Vec3): Vec3 {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

func main() {
    var N = normalize(input.Normal);
    var V = normalize(uniform.camPos - input.WorldPos);

    var F0 = vec3(0.04);
    F0 = mix(F0, uniform.albedo, uniform.metallic);

    var Lo = vec3(0);
    for (var i = 0; i < MAX_LIGHTS; i += 1) {
        var L = normalize(uniform.lightPositions[i] - input.WorldPos);
        var H = normalize(V + L);
        var distance = length(uniform.lightPositions[i] - input.WorldPos);
        var attenuation = 1.0 / (distance * distance);
        var radiance = uniform.lightColors[i] * attenuation;

        var NDF = DistributionGGX(N, H, uniform.roughness);
        var G = GeometrySmith(N, V, L, uniform.roughness);
        var F = fresnelSchlick(max(dot(V, H), 0.0), F0);

        var kS = F;
        var kD = 1.0 - kS;
        kD *= 1.0 - uniform.metallic;

        var numerator = NDF * G * F;
        var denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        var specular = numerator / denominator;

        var NdotL = max(dot(N, L), 0.0);
        Lo += (kD * uniform.albedo / PI + specular) * radiance * NdotL;
    }

    var ambient = uniform.ao * uniform.albedo * uniform.ao;
    var color = ambient + Lo;

    color = color / (color + 1.0);
    color = pow(color, 1.0 / 2.2);

    output.FragColour = color;
}