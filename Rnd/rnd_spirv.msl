#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

template<typename T, uint A>
inline void spvArrayCopyFromConstantToStack1(thread T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromConstantToThreadGroup1(threadgroup T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToStack1(thread T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToThreadGroup1(threadgroup T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToStack1(thread T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToThreadGroup1(threadgroup T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToDevice1(device T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromConstantToDevice1(device T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToDevice1(device T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToDevice1(device T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToStack1(thread T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToThreadGroup1(threadgroup T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

fragment void main0(constant float3x3& u_matA [[buffer(0)]], constant float3x3& u_matB [[buffer(1)]], constant spvUnsafeArray<float, 10>& u_arrA [[buffer(2)]], constant spvUnsafeArray<float3, 10>& u_arrB [[buffer(12)]], constant spvUnsafeArray<float3x3, 10>& u_arrC [[buffer(22)]])
{
    spvUnsafeArray<float, 10> a0;
    spvArrayCopyFromConstantToStack1(a0.elements, u_arrA);
    float a1 = a0[0];
    spvUnsafeArray<float3, 10> a2;
    spvArrayCopyFromConstantToStack1(a2.elements, u_arrB);
    float3 v0 = float3(1.0, 2.0, 3.0);
    float v1 = v0.y;
    float v2 = v0.y;
    float3x3 m0 = u_matA;
    float3 mr0 = m0[0];
    float mrc0 = m0[0].x;
    int row = 1;
    int col = 2;
    float mrc1 = m0[row][col];
    int idx = 1;
    a0[idx] = 5.0;
    v0.x = 5.0;
    m0[idx].x = 5.0;
    m0[idx].y = 6.0;
    m0[idx] = float3(1.0, 2.0, 3.0);
    m0[idx] = float3(5.0);
    a2[idx].x = 5.0;
    a2[idx].y = 6.0;
    a2[idx] = float3(7.0);
    m0[idx][idx] = float(4);
    float3x3 p0 = u_matA * u_matB;
    float3x3 p1 = u_matB * u_matA;
    float3x3 p2 = u_matA * float3x3(float3(2.0), float3(2.0), float3(2.0));
    float3x3 p3 = float3x3(float3(2.0), float3(2.0), float3(2.0)) * u_matA;
    float3 p5 = u_matA * float3(1.0, 2.0, 3.0);
    float3 p6 = float3(1.0, 2.0, 3.0) * u_matA;
    float3x3 p7 = u_arrC[idx] * u_matA;
    float3 p8 = u_arrC[idx][idx] * u_matA;
    float3x3 _246 = float3x3(float3(u_arrC[idx][idx][idx], u_arrC[idx][idx][idx], u_arrC[idx][idx][idx]), float3(u_arrC[idx][idx][idx], u_arrC[idx][idx][idx], u_arrC[idx][idx][idx]), float3(u_arrC[idx][idx][idx], u_arrC[idx][idx][idx], u_arrC[idx][idx][idx])) * u_matA;
    float3x3 p9 = _246;
    float3x3 m1 = float3x3(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), float3(0.0, 0.0, 1.0));
    float4x4 m2 = float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0));
    float3x3 m3 = float3x3(float3(6.0), float3(6.0), float3(6.0));
    float4x4 m4 = float4x4(float4(8.0), float4(8.0), float4(8.0), float4(8.0));
}

