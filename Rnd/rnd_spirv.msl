#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

template<typename T, uint A>
inline void spvArrayCopyFromConstantToStack1(thread T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromConstantToThreadGroup1(threadgroup T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToStack1(thread T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToThreadGroup1(threadgroup T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToStack1(thread T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToThreadGroup1(threadgroup T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToDevice1(device T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromConstantToDevice1(device T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToDevice1(device T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToDevice1(device T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToStack1(thread T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromDeviceToThreadGroup1(threadgroup T (&dst)[A], device const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

static inline __attribute__((always_inline))
float2 echo(float2 x)
{
    return x;
}

static inline __attribute__((always_inline))
float test(float x)
{
    float _mnsl_param_x = x + float(1);
    _mnsl_param_x = x * float(2);
    _mnsl_param_x = float(5);
    return x;
}

fragment void main0(constant float2& u_u_Vec [[buffer(0)]], constant spvUnsafeArray<float2, 10>& u_u_VecList [[buffer(1)]])
{
    float2 vecA = float2(float(1)) * u_u_Vec;
    float xA = vecA.x;
    float yA = vecA.y;
    float xB = u_u_Vec.x;
    float yB = u_u_Vec.y;
    float2 vecC = vecA.yx;
    float2 vecD = u_u_Vec.xy;
    xA = float(1);
    vecA.x = float(1);
    vecA.y = float(2);
    float2 _108 = float2((vecA.x));
    vecA = float2(_108.x, _108.y);
    float3 vecE = vecA.xyx;
    float3 vecF = echo(vecA).xxy;
    float va = 1.0;
    va += float(1);
    va *= float(2);
    va = test(va);
    float qa = va;
    qa /= float(2);
    int idx = 0;
    spvUnsafeArray<float2, 10> vecList;
    spvArrayCopyFromConstantToStack1(vecList.elements, u_u_VecList);
    float2 vecG = vecList[idx];
    float2 vecH = u_u_VecList[idx];
    float listX = u_u_VecList[idx].x;
    float listY = u_u_VecList[idx].y;
    float3 listSwizzle = u_u_VecList[idx].xxy;
    float vecGx = vecG.x;
    float vecGy = vecG.y;
    float3 vecGxyx = vecG.xyx;
    float subswizzle = u_u_VecList[idx].xy.yx.x;
}

