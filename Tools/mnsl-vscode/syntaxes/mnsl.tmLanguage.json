{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "MNSL",
  "patterns": [
    { "include": "#meta" },
    { "include": "#variable-declaration" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#function-calls" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#identifiers" },
    { "include": "#comments" }
  ],
  "repository": {
    "meta": {
      "patterns": [
        {
          "name": "meta.annotation.mnsl",
          "begin": "@(input|output|uniform)",
          "beginCaptures": {
            "1": { "name": "storage.modifier.metadata.alcl" }
          },
          "end": "\\)",
          "patterns": [
            {
              "name": "meta.annotation.parameters.mnsl",
              "match": "\\(*([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:<.*?>)?(?:\\[[^\\]]+\\])?)",
              "captures": {
                "1": { "name": "variable.parameter.mnsl" },
                "2": { "name": "entity.name.class.mnsl" }
              }
            }
          ]
        },
         {
           "name": "meta.annotation.define.mnsl",
           "match": "@(define)",
           "captures": {
             "1": { "name": "storage.modifier.metadata.mnsl" }
           }
         },
        {
          "name": "keyword.import.alcl",
          "match": "\\bneed\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.mnsl",
          "match": "\\b(while|for|return|break|continue|if|else|in|of|as|end|include)\\b"
        }
      ]
    },
    "variable-declaration": {
      "patterns": [
        {
          "name": "meta.variable.declaration.mnsl",
            "match": "\\b(var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?::\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:<.*?>)?))?",
          "captures": {
            "1": { "name": "keyword.control.mnsl" },
            "2": { "name": "variable.other.mnsl" },
            "3": { "name": "entity.name.class.mnsl" }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.mnsl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.mnsl",
          "match": "\\\\."
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function-call.mnsl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.mnsl" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
      {
        "name": "meta.function.declaration.mnsl",
        "begin": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
        "beginCaptures": {
        "1": { "name": "keyword.control.mnsl" },
        "2": { "name": "entity.name.function.mnsl" }
        },
        "end": "\\{|$",
        "patterns": [
        {
          "name": "meta.function.parameters.mnsl",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
          {
            "match": "([a-zA-Z_][a-zA-Z0-9_]*)(\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:<.*?>)?))?",
            "captures": {
            "1": { "name": "variable.parameter.mnsl" },
            "3": { "name": "entity.name.class.mnsl" }
            }
          },
          {
            "name": "punctuation.separator.parameter.mnsl",
            "match": ","
          }
          ]
        },
        {
          "name": "meta.function.return-type.mnsl",
          "match": ":\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:<.*?>)?)",
          "captures": {
          "1": { "name": "entity.name.class.mnsl" }
          }
        }
        ]
      }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "constant.numeric.mnsl",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.language.mnsl",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.mnsl",
          "match": "(\\+=|-=|\\*=|/=|%=|=)"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.local.mnsl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.mnsl",
          "match": "//.*"
        }
      ]
    }
  },
  "scopeName": "source.mnsl"
}
